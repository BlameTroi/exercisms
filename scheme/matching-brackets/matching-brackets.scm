(import (rnrs))

;; helpers to classify the brackets
(define openers '(#\( #\[ #\{ ))
(define closers '(#\) #\] #\}))
(define brackets (append openers closers))
(define squares '(#\[ #\]))
(define rounds '(#\( #\)))
(define curlies '(#\{ #\}))
(define (bracket? c) (member c brackets))
(define (square? c) (member c squares))
(define (round? c) (member c rounds))
(define (curly? c) (member c curlies))
(define (opener? c) (member c openers))
(define (bracket-type c)
  (cond ((square? c) 'bracket-square)
        ((round? c) 'bracket-round)
        ((curly? c) 'bracket-curly)
        (else 'bracket-none)))

(define (balanced? string)
  (letrec*
      ((stack '()) (x '())
       (push (lambda (y) (set! stack (cons y stack))))
       (pop (lambda () (set! x (car stack)) (set! stack (cdr stack)) x))
       (c #\nul)
       (bt 'bracket-none) (lt 'bracket-none)
       (ok #t)
       (f (lambda (chars)
            (cond ((null? chars) (and ok (zero? (length stack))))
                  (else
                   (set! c (car chars))
                   (if (bracket? c)
                       (begin
                         (set! bt (bracket-type c))
                         (cond ((opener? c) (push bt))
                               (else (cond ((null? stack) (set! ok #f))
                                           (else (set! lt (pop))
                                                 (if (not (eq? bt lt))
                                                     (set! ok #f))))))))
                   (if ok
                       (f (cdr chars))
                       #f))))))
    (f (string->list string))))
